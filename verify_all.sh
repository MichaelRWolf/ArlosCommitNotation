#! /bin/bash

verify_sh="$HOME/repos/ApprovalTests.shell/bash/verify.sh"
diff_command="sdiff"
diff_command="meld"

warn() { 
    echo "$@" >&2
}


language="${1}"; 
shift 1;
case "${language}" in
    (sh) ;;
    (*) warn illegal language: ${language};
	exit 3
esac    


function verify_fn(){
    bash ${verify_sh} -d "${diff_command}" "$@" 
}

ricm_path=$(PATH=.:$PATH which ricm.sh)


for risk in safe validated risky broken
do
    for intention in feature bugfix refactoring documentation
    do
	test_name="${language}.${risk}-${intention}"
	message="Message generated by: ${ricm_path} -r '${risk}'  -i '${intention}'"
	${ricm_path} -r "${risk}"  -i "${intention}"  "${message}"
    done
done | verify_fn -t"${language}.all_risks_all_intentions"


# ================================================================
test_name="${language}.malformed_command_line"

{
    ${ricm_path}                        Command line missing -r flag
    warn
    warn

    ${ricm_path} -r risky               Command line missing -i flag
    warn
    warn

    ${ricm_path} -r risky -i refactoring
    warn
    warn
} 2>&1 | verify_fn -t "${test_name}"


# ================================================================
test_name="${language}.help"

{
    ${ricm_path} -rsafe -idocumentation -h
    rc=$?

    echo
    if (( rc == 2 ))
    then        
	echo "got expected return code (2)"
    else
	echo "got unexpected return code ($rc)"	
    fi
} | verify_fn -t "${test_name}"
