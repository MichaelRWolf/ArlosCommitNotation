#! /bin/bash


export n_th_parent=0
export generation_count=1

if [[ "${1}" ]]; then
    n_th_parent="${1}"

    if [[ "${2}" ]]; then
	generation_count="${2}"
    fi
fi


export commit_reference_newest
export commit_reference_oldest

if (( ${n_th_parent} == 0 )); then
    commit_reference_newest=""
    commit_reference_oldest=""
else 
    commit_reference_newest="HEAD~${n_th_parent}"
    commit_reference_oldest="HEAD~$((${n_th_parent} + ${generation_count}))"
fi


display_gpt_instructions(){
    cat <<GPT_INSTRUCTIONS
I would like you to generate a git-commit message.

Here is how we will work together:
1. I will pass a unified diff to you that was generated by git-diff.
2. You will generate a message with a 'Short Summary' and an optional 'Detailed Summary'
    - Short summary
      - Occupies the first line
      - Contains short summary
      - Complete sentences not necessary
      - Try to keep shorter than 50 characters

    -Detailed Summary
      - Separate 'Detailed Summary' from 'Short Summary' with a blank line.
      - Start the 'Detailed Summary' with text "Summary by ChatGPT from unified diff:"
      - If the change was a simple refactoring, this section is not necessary.
      - For non-simple changes, do what you think is best to convey the changes

Other guidelines:
  - It is not necessary to generate headings for 'Short Summary' or 'Detailed Summary'.  Those are descriptive terms to aid specifying the instructions.
  - Display the entire git-commit message in a single text box with a "copy" button.  This will make it easier to "paste" into another application (e.g GitKracken)


Many changes will be micro-commits for simple (often automated) refactorings.
  If this is true, the format of the short summary should follow these examples, and a 'Detailed Summary'
    - Rename to 'new_variable_name'
    - Rename to 'new_function_name()'
    - Rename to 'new_method_name()'
    - Extract function 'new_function_name()'
    - Extract method 'new_method_name()'
    - Inline function 'function_name'
    - Inline method 'function_name'
GPT_INSTRUCTIONS
}


(
    
    display_gpt_instructions
    echo

    echo "BEGIN Unified Diff"
    (
	# Note
	#     1. The -x flag (xtrace) is intended for ChatGPT use, not human use.  Keep it in.
	#     2. Double quotes are intentionally missing around commit_reference_* to prevent empty args to git-diff(1)
	set -x;
	git diff --no-prefix --unified=0 ${commit_reference_newest} ${commit_reference_oldest}
    )
    echo "END Unified Diff"
) 2>&1 | pbcopy
pbpaste


(
    echo "Related git-log messages"

    git log --oneline |
        (head -n$(($n_th_parent + $generation_count - 1)) 2>/dev/null || echo "Uncommitted changes...") |
	tail -n"${generation_count}" |
	nl -v ${n_th_parent} 

) >&2


