#!/bin/bash

space=' '
dash='-'

warn() {
    echo "$*" >&2
}


parse_args() {
    while getopts "r:i:h" opt; do
      case $opt in
        r)
          risk="$OPTARG"
          ;;
        i)
          intention="$OPTARG"
          ;;
	h) 
	    do_help
	    exit 2
	    ;;
        \?)
          echo "Invalid option: -$OPTARG" >&2
          exit 1
          ;;
      esac
    done
    shift $((OPTIND-1))
    
    message="$*"
}


do_help(){
    usage 2>&1
    echo
    echo

    cat <<HELP_MESSAGE
|-------------------------------------------------------------------+----------------------------------------+--------------|
| Risk Level        | Code |  Meaning                               | Correctness Guarantees                                |
|-------------------+------+----------------------------------------+----------------------------------------+--------------|
| Known safe        | .    | Addresses all known and unknown risks. | Intended Change, Known Invariants, Unknown Invariants |
| Validated         | ^    | Addresses all known risks.             | Intended Change, Known Invariants                     |
| Risky             | !    | Some known risks remain unverified.    | Intended Change                                       |
| (Probably) Broken | @    | No risk attestation.                   |                                                       |
|-------------------------------------------------------------------+----------------------------------------+--------------|


|--------------------------------------------------------------------------------------------------------------------|
| Core intentions                                                                                                    |
|--------------------------------------------------------------------------------------------------------------------|
| Prefix | Name          | Intention                                                                                 |
|--------+---------------+-------------------------------------------------------------------------------------------|
| F      | Feature       | Change or extend one aspect of program behavior without altering others.                  |
| B      | Bugfix        | Repair one existing, undesirable program behavior without altering any others.            |
| r      | Refactoring   | Change implementation without changing program behavior.                                  |
| d      | Documentation | Change something which communicates to team members and does not impact program behavior. |
|--------+---------------+-------------------------------------------------------------------------------------------|


|--------------------------------------------------------------------------------------------------------------------|
| Extension intentions                                                                                               |
|--------------------------------------------------------------------------------------------------------------------|
| Prefix | Name          | Intention                                                                                 |
|--------|---------------+-------------------------------------------------------------------------------------------|
|        |               | Provable Refactorings                                                                     |
|        |               | Test-supported Procedural Refactorings                                                    |
|        |               | End-User Documentation                                                                    |
|        |               | Small Features and Bug Fixes                                                              |
|--------+---------------+-------------------------------------------------------------------------------------------|



TODO
Add Missing codes from ArlosCommitNotation/Extension Intentions.md
$(cat 'Extension Intentions.md')

HELP_MESSAGE
}


function risk_code {
    case $1 in
	safe)      echo -n '.' ;;
	validated) echo -n '^' ;;
	risky)     echo -n '!' ;;
	broken)    echo -n '@' ;;

	*)         echo -n ' ' ;;
    esac
}


risk_values() {
    echo "safe validated risky broken"
}


function intention_code {
    case $1 in
	feature)       echo -n 'f' ;;
	bugfix)        echo -n 'b' ;;
	refactoring)   echo -n 'r' ;;
	documentation) echo -n 'd' ;;

	*)             echo -n ' ' ;;
    esac	
}


intention_values() {
    echo "feature bugfix refactoring documentation"
}


usage() {
    warn "USAGE: $(basename $0) -r risk  -i intention  message..."
    warn "    risk in      $(risk_values)"
    warn "    intention in $(intention_values)"
}


validate_args(){
    if [[ "${risk}" == '' ]] 
    then
	warn 'Undefined risk.  Specify with -r flag.'
	usage
	exit 1
    fi

    if [[ "${intention}" == '' ]] 
    then
	warn 'Undefined intention.  Specify with -i flag.'
	usage
	exit 1
    fi

    if [[ "${message}" == '' ]]
    then
	warn 'Undefined message.'
	usage
	exit 1
    fi
}


parse_and_validate_args(){
    parse_args "$@"
    validate_args
}


main() {
    local risk=
    local intention=

    parse_and_validate_args "$@"

    risk_code="$(risk_code $risk)"
    intention_code="$(intention_code $intention)"

    echo "${risk_code}${space}${intention_code}${space}${message}"
}


main "$@"
